#pragma kernel BoidComputation
static const int threadGroupSize = 1024;

struct Boid {
    float3 position;
    float3 direction;

    float3 flockHeading;
    float3 flockCentre;
    float3 separationHeading;

    int flockmatesInRangex; 
};

RWStructuredBuffer<Boid> boids;
int numBoids;
float viewRadius;
float avoidRadius;

[numthreads(threadGroupSize,1,1)]
void BoidComputation (uint3 id : SV_DispatchThreadID)
{

    float squareViewRadius  = viewRadius * viewRadius;
    float squareAvoidRadius = avoidRadius * avoidRadius;
    
    //For all boids
    for (int indexB = 0; indexB < numBoids; ++indexB)
    {
        //Other than self
        if (id.x != indexB)
        {
            Boid boidB = boids[indexB];
            float3 offset = boidB.position - boids[id.x].position;
            float sqaureDistance = offset.x * offset.x + offset.y * offset.y + offset.z * offset.z;

            // If in veiw distance
            if (sqaureDistance < squareViewRadius)
            {
                boids[id.x].flockmatesInRangex += 1;
                boids[id.x].flockHeading += boidB.direction;
                boids[id.x].flockCentre += boidB.position;
                
                if (sqaureDistance < squareAvoidRadius)
                {
                    boids[id.x].separationHeading -= offset / sqaureDistance;
                }
            }
        }
    }
    
}
